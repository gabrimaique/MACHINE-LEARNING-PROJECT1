{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QlrodJHZjYw0"
      },
      "source": [
        "\n",
        "# Audio Analysis Notebook (Google Colab Version),\n",
        "\n",
        "This notebook performs:\n",
        "    \n",
        "1. Speaker diarization using pyannote.audio\n",
        "2. Speech-to-text conversion for each speaker using whisper\n",
        "3. Word frequency and sentiment analysis\n",
        "4. Political bias analysis using a pre-trained model\n",
        "    "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DcjuVXaMaC5d"
      },
      "source": [
        "## Setting up Environment\n",
        "This cell sets up the environment by importing necessary libraries for audio processing,speech-to-text, text analysis, and machine learning. Downloading required resources for text processing. Checking if a GPU is available and setting the computation device accordingly."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TGsTJB30kYg6",
        "outputId": "3bcf0eb3-c7b8-40d8-9554-5b6c109fb018"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Using device: cpu\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "from pyannote.audio import Pipeline\n",
        "import whisper\n",
        "from pathlib import Path\n",
        "import nltk\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.probability import FreqDist\n",
        "from textblob import TextBlob\n",
        "from transformers import pipeline\n",
        "import numpy as np\n",
        "from collections import defaultdict\n",
        "\n",
        "# Download required NLTK data\n",
        "nltk.download('punkt', quiet=True)\n",
        "nltk.download('stopwords', quiet=True)\n",
        "\n",
        "# Check if CUDA is available\n",
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "print(f\"Using device: {device}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4RKC0K0slFsG"
      },
      "outputs": [],
      "source": [
        "audio_file = \"/content/drive/MyDrive/Audioanalysis/TrumpHarrisDebate.mp3\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BmUQr0eeaW6E"
      },
      "source": [
        "###  **Speaker** **Diarization**\n",
        "\n",
        "This cell performs speaker diarization, which identifies and segments different speakers in an audio file.  \n",
        "\n",
        "- **Hugging Face Token**: You have to enter your hugging face token. If you don't have one head over to https://huggingface.co/docs/hub/en/security-tokens.  \n",
        "- **Function `perform_diarization`**:  \n",
        "  - Loads a speaker diarization model from Hugging Face.  \n",
        "  - Processes the audio file to identify speaker segments.  \n",
        "  - Groups these segments by speaker into a dictionary.  \n",
        "- **Output**: Prints the number of speakers detected in the audio.  \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i4PbZHP3lmNF",
        "outputId": "5428f62c-ba92-4277-b3a2-e062ae725dae"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Found 3 speakers\n"
          ]
        }
      ],
      "source": [
        "# Get Hugging Face token\n",
        "hf_token = 'REPLACE WITH YOUR HUGGINGFACE TOKEN'\n",
        "\n",
        "# Speaker Diarization\n",
        "def perform_diarization(audio_file):\n",
        "    # Initialize pipeline with pre-trained model\n",
        "    pipeline = Pipeline.from_pretrained(\"pyannote/speaker-diarization\",\n",
        "                                       use_auth_token=hf_token)\n",
        "\n",
        "    # Move to GPU if available\n",
        "    pipeline = pipeline.to(torch.device(device))\n",
        "\n",
        "    # Apply pipeline to audio file\n",
        "    diarization = pipeline(str(audio_file))\n",
        "\n",
        "    # Extract segments by speaker\n",
        "    speaker_segments = defaultdict(list)\n",
        "    for turn, _, speaker in diarization.itertracks(yield_label=True):\n",
        "        speaker_segments[speaker].append({\n",
        "            'start': turn.start,\n",
        "            'end': turn.end\n",
        "        })\n",
        "\n",
        "    return speaker_segments\n",
        "\n",
        "speaker_segments = perform_diarization(audio_file)\n",
        "print(f\"Found {len(speaker_segments)} speakers\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CB7dJIpGxdZs",
        "outputId": "7e8aa0bb-e4c6-4d61-fc51-cac64118cb36"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "SPEAKER_02 {00:00:01 - 00:00:05}\n",
            "SPEAKER_02 {00:00:20 - 00:00:29}\n",
            "SPEAKER_02 {00:00:52 - 00:01:22}\n",
            "SPEAKER_02 {00:01:40 - 00:01:41}\n",
            "SPEAKER_02 {00:01:43 - 00:01:45}\n",
            "SPEAKER_02 {00:02:08 - 00:02:39}\n",
            "SPEAKER_02 {00:02:54 - 00:03:07}\n",
            "SPEAKER_02 {00:03:09 - 00:03:10}\n",
            "SPEAKER_00 {00:00:01 - 00:00:02}\n",
            "SPEAKER_00 {00:00:06 - 00:00:10}\n",
            "SPEAKER_00 {00:01:37 - 00:01:42}\n",
            "SPEAKER_00 {00:01:46 - 00:01:51}\n",
            "SPEAKER_00 {00:01:55 - 00:02:08}\n",
            "SPEAKER_01 {00:00:10 - 00:00:20}\n",
            "SPEAKER_01 {00:00:30 - 00:00:52}\n",
            "SPEAKER_01 {00:01:22 - 00:01:37}\n",
            "SPEAKER_01 {00:01:40 - 00:01:40}\n",
            "SPEAKER_01 {00:01:48 - 00:01:55}\n",
            "SPEAKER_01 {00:02:39 - 00:02:54}\n",
            "SPEAKER_01 {00:03:10 - 00:03:23}\n"
          ]
        }
      ],
      "source": [
        "from collections import defaultdict\n",
        "\n",
        "# Function to format time in HH:MM:SS format\n",
        "def format_time(seconds):\n",
        "    minutes, seconds = divmod(seconds, 60)\n",
        "    hours, minutes = divmod(minutes, 60)\n",
        "    return f\"{int(hours):02}:{int(minutes):02}:{int(seconds):02}\"\n",
        "\n",
        "# Extract and print the speaker intervals with formatted times\n",
        "def print_speaker_times(speaker_segments):\n",
        "    for speaker, segments in speaker_segments.items():\n",
        "        for segment in segments:\n",
        "            start_time = format_time(segment['start'])\n",
        "            end_time = format_time(segment['end'])\n",
        "            print(f\"{speaker} {{{start_time} - {end_time}}}\")\n",
        "\n",
        "# Call the function\n",
        "print_speaker_times(speaker_segments)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kHUEu2cEuMvA"
      },
      "outputs": [],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WmpT5x_6bSzc"
      },
      "source": [
        "###   Speaker intervals detection\n",
        "\n",
        "This cell formats and displays the speaker intervals detected in the audio file.  \n",
        "\n",
        "- **Function `format_time`**: Converts time from seconds to `HH:MM:SS` format.  \n",
        "- **Function `print_speaker_times`**:  \n",
        "  - Iterates through each speaker's segments.  \n",
        "  - Formats the start and end times of each segment.  \n",
        "  - Prints the intervals for each speaker in a readable format.  \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rb8kdPaSyfYl",
        "outputId": "e950db52-6e3c-434a-ebe9-29031cd64edb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "SPEAKER_02: Kamala Harris. It's up good to me. She's a fun. Thank you.  Donald Trump left us the worst unemployment since the Great Depression. And what we have done is clean up Donald Trump's mess.  One does not have to abandon their faith or deeply held beliefs to agree. The government and Donald Trump certainly should not be telling a woman what to do with her body. Pregnant women who want to carry a pregnancy to term suffering from a miscarriage being denied care in an emergency room because the healthcare providers are afraid they might go to jail and she's bleeding out in a car in the parking lot. She didn't want that. Her husband didn't want that.  like that.  You talk about extreme.  Donald Trump was fired by 81 million people. So let's be clear about that. And clearly he is having a very difficult time processing that. World leaders are laughing at Donald Trump. I have talked with military leaders, some of whom work with you. And they say you're a disgrace. Understand what it would mean if Donald Trump were back in the White House with no guardrails. Because certainly we know now the court won't stop him. We know JD Vance is not going to stop him. It's up to the American people.  So I think you've heard tonight two very different visions for our country, one that is focused on the future, and the other that is focused on the past, and an attempt to take us backward.  but we're not going back.\n",
            "SPEAKER_00: Kamala Harris.  Welcome to you both. It's wonderful to have you. It's an honor to have you both here tonight.  the city manager says there's no evidence of that. Vice President Harris, I'll let you respond to the rest of what you've heard.  Are you now acknowledging that you lost in 2020? No, I don't acknowledge it at all. I said that's sarcastically, you know that.  Mr. President, thank you. Vice President Harris, you heard the President there tonight. He said he didn't say that, that he lost by Whiskler. So he still believes he did not lose the election. That was won by President Biden and yourself.\n",
            "SPEAKER_01: We have inflation like very few people have ever seen before, probably the worst in our nation's history. This has been a disaster for people, for the middle class, but for every class.  She's a Marxist. Everybody knows she's a Marxist. Her father's a Marxist professor in economics, and he taught her well. But her vice presidential pick says abortion in the ninth month is absolutely fine. He also says execution after birth. It's execution no longer abortion because the baby is born is OK. And that's not OK with me.  In Springfield, they're eating the dogs, the people that came in, they're eating the cats, they're eating the pets of the people that live there. And this is what's happening in our country.  two  now. I don't know. I said it all. I said that sarcastically. You know that. It was said, oh, we lost by a whisker. That was said sarcastically.  This is the one that weaponized, not me. She weaponized. I probably took a bullet to their head because of the things that they say about me. They talk about democracy. I'm a threat to democracy. There the threat to democracy.  They've had three and a half years to create jobs and all the things we talked about. Why hasn't she done it? The worst president, the worst vice president in the history of our country.\n"
          ]
        }
      ],
      "source": [
        "from pydub import AudioSegment\n",
        "import os\n",
        "import tempfile\n",
        "\n",
        "# Speech to Text for each speaker\n",
        "def transcribe_segments(audio_file, speaker_segments):\n",
        "    # Load Whisper model\n",
        "    model = whisper.load_model(\"base\").to(device)\n",
        "\n",
        "    # Load the audio file\n",
        "    try:\n",
        "        audio = AudioSegment.from_file(str(audio_file))\n",
        "    except:\n",
        "        # If format not recognized, try forcing mp3\n",
        "        audio = AudioSegment.from_mp3(str(audio_file))\n",
        "\n",
        "    speaker_transcripts = {}\n",
        "\n",
        "    # Create a temporary directory for audio segments\n",
        "    with tempfile.TemporaryDirectory() as temp_dir:\n",
        "        for speaker, segments in speaker_segments.items():\n",
        "            speaker_text = \"\"\n",
        "\n",
        "            for i, segment in enumerate(segments):\n",
        "                # Convert timestamps to milliseconds\n",
        "                start_ms = int(segment['start'] * 1000)\n",
        "                end_ms = int(segment['end'] * 1000)\n",
        "\n",
        "                # Extract segment\n",
        "                segment_audio = audio[start_ms:end_ms]\n",
        "\n",
        "                # Save segment to temporary file\n",
        "                temp_path = os.path.join(temp_dir, f\"segment_{i}.wav\")\n",
        "                segment_audio.export(temp_path, format=\"wav\")\n",
        "\n",
        "                # Transcribe segment\n",
        "                try:\n",
        "                    result = model.transcribe(temp_path)\n",
        "                    speaker_text += result['text'] + \" \"\n",
        "                except Exception as e:\n",
        "                    print(f\"Error transcribing segment {i} for {speaker}: {str(e)}\")\n",
        "                    continue\n",
        "\n",
        "            speaker_transcripts[speaker] = speaker_text.strip()\n",
        "\n",
        "    return speaker_transcripts\n",
        "\n",
        "speaker_transcripts = transcribe_segments(audio_file, speaker_segments)\n",
        "\n",
        "# Print transcripts\n",
        "for speaker, transcript in speaker_transcripts.items():\n",
        "    print(f\"{speaker}: {transcript}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JVCaHFedbhlm"
      },
      "source": [
        "### Textual Analysis  \n",
        "\n",
        "This cell analyzes text data for each speaker by performing:  \n",
        "\n",
        "- **Word Frequency Analysis**:  \n",
        "  - Tokenizes text into words.  \n",
        "  - Removes stopwords and non-alphanumeric tokens.  \n",
        "  - Identifies the top 10 most frequent words.  \n",
        "\n",
        "- **Sentiment Analysis**:  \n",
        "  - Uses TextBlob to calculate:  \n",
        "    - **Polarity**: Indicates the positivity or negativity of the text.  \n",
        "    - **Subjectivity**: Measures how subjective or opinion-based the text is.  \n",
        "\n",
        "- **Results**:  \n",
        "  - Prints the top words and sentiment metrics for each speaker.  \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8jdaa-KG5daJ",
        "outputId": "e6ea8495-501e-442c-8ef8-e1fbb32a5b95"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "SPEAKER_02:\n",
            "Top 10 words: {'donald': 6, 'trump': 6, 'want': 3, 'us': 2, 'one': 2, 'certainly': 2, 'people': 2, 'leaders': 2, 'back': 2, 'know': 2}\n",
            "Sentiment polarity: -0.01\n",
            "Sentiment subjectivity: 0.42\n",
            "SPEAKER_00:\n",
            "Top 10 words: {'president': 5, 'harris': 3, 'tonight': 2, 'vice': 2, 'heard': 2, 'lost': 2, 'said': 2, 'kamala': 1, 'welcome': 1, 'wonderful': 1}\n",
            "Sentiment polarity: 0.90\n",
            "Sentiment subjectivity: 0.95\n",
            "SPEAKER_01:\n",
            "Top 10 words: {'people': 4, 'said': 4, 'worst': 3, 'marxist': 3, 'eating': 3, 'democracy': 3, 'probably': 2, 'history': 2, 'class': 2, 'vice': 2}\n",
            "Sentiment polarity: -0.26\n",
            "Sentiment subjectivity: 0.53\n"
          ]
        }
      ],
      "source": [
        "# Word Frequency and Sentiment Analysis\n",
        "def analyze_text(speaker_transcripts):\n",
        "    analysis_results = {}\n",
        "\n",
        "    for speaker, text in speaker_transcripts.items():\n",
        "        # Word frequency\n",
        "        tokens = word_tokenize(text.lower())\n",
        "        # Remove stopwords\n",
        "        stopwords = set(nltk.corpus.stopwords.words('english'))\n",
        "        tokens = [word for word in tokens if word.isalnum() and word not in stopwords]\n",
        "\n",
        "        freq_dist = FreqDist(tokens)\n",
        "\n",
        "        # Sentiment analysis using TextBlob\n",
        "        blob = TextBlob(text)\n",
        "        sentiment = blob.sentiment\n",
        "\n",
        "        analysis_results[speaker] = {\n",
        "            'top_words': dict(freq_dist.most_common(10)),\n",
        "            'sentiment_polarity': sentiment.polarity,\n",
        "            'sentiment_subjectivity': sentiment.subjectivity\n",
        "        }\n",
        "\n",
        "    return analysis_results\n",
        "\n",
        "analysis_results = analyze_text(speaker_transcripts)\n",
        "\n",
        "# Print results\n",
        "for speaker, results in analysis_results.items():\n",
        "    print(f\"{speaker}:\")\n",
        "    print(f\"Top 10 words: {results['top_words']}\")\n",
        "    print(f\"Sentiment polarity: {results['sentiment_polarity']:.2f}\")\n",
        "    print(f\"Sentiment subjectivity: {results['sentiment_subjectivity']:.2f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qaMbFjWUbufi"
      },
      "source": [
        "### Bias analysis\n",
        "\n",
        "This cell analyzes political bias and sentiment in speaker transcripts using advanced NLP models:  \n",
        "\n",
        "- **Sentiment Analysis**:  \n",
        "  - Uses a sentiment analysis pipeline (`RoBERTa base`) to evaluate the overall positivity, negativity, or neutrality of the text.  \n",
        "\n",
        "- **Topic Analysis**:  \n",
        "  - Employs a zero-shot classification model (`BART`) to classify the text into predefined political topics (e.g., conservative views, liberal views, economic policy).  \n",
        "\n",
        "- **Bias Results**:  \n",
        "  - For each speaker, the following metrics are calculated:  \n",
        "    - **Sentiment Score**: Average sentiment based on the text.  \n",
        "    - **Top Political Topics**: A confidence score for each analyzed topic.  \n",
        "    - **Overall Tendency**: Indicates conservative, liberal, or neutral leanings based on sentiment and topic scores.  \n",
        "\n",
        "- **Output**:  \n",
        "  - Prints the overall political tendency, sentiment score, and detailed topic analysis for each speaker.  \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wTyCp22f-Kn-",
        "outputId": "67eedcf4-5091-484b-ca34-8251a32e4ae0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "SPEAKER_02:\n",
            "Overall tendency: Relatively neutral\n",
            "Sentiment score: 0.00\n",
            "\n",
            "Topic Analysis:\n",
            "social policy: 0.83\n",
            "liberal views: 0.49\n",
            "conservative views: 0.40\n",
            "economic policy: 0.35\n",
            "neutral politics: 0.01\n",
            "\n",
            "SPEAKER_00:\n",
            "Overall tendency: Relatively neutral\n",
            "Sentiment score: 0.00\n",
            "\n",
            "Topic Analysis:\n",
            "liberal views: 0.85\n",
            "conservative views: 0.43\n",
            "social policy: 0.18\n",
            "economic policy: 0.16\n",
            "neutral politics: 0.12\n",
            "\n",
            "SPEAKER_01:\n",
            "Overall tendency: Relatively neutral\n",
            "Sentiment score: 0.00\n",
            "\n",
            "Topic Analysis:\n",
            "economic policy: 0.97\n",
            "conservative views: 0.93\n",
            "social policy: 0.91\n",
            "liberal views: 0.82\n",
            "neutral politics: 0.16\n"
          ]
        }
      ],
      "source": [
        "\n",
        "def analyze_political_bias(speaker_transcripts):\n",
        "    # Load sentiment analysis pipeline using RoBERTa base\n",
        "    classifier = pipeline(\"sentiment-analysis\",\n",
        "                        model=\"cardiffnlp/twitter-roberta-base-sentiment\",\n",
        "                        device=0 if torch.cuda.is_available() else -1)\n",
        "\n",
        "    # Load zero-shot classification for topic analysis\n",
        "    topic_classifier = pipeline(\"zero-shot-classification\",\n",
        "                              model=\"facebook/bart-large-mnli\",\n",
        "                              device=0 if torch.cuda.is_available() else -1)\n",
        "\n",
        "    bias_results = {}\n",
        "\n",
        "    # Political topics to analyze\n",
        "    political_topics = [\n",
        "        \"conservative views\",\n",
        "        \"liberal views\",\n",
        "        \"neutral politics\",\n",
        "        \"economic policy\",\n",
        "        \"social policy\"\n",
        "    ]\n",
        "\n",
        "    for speaker, text in speaker_transcripts.items():\n",
        "        # Analyze sentiment\n",
        "        chunks = [text[i:i+512] for i in range(0, len(text), 512)]\n",
        "        sentiment_results = [classifier(chunk)[0] for chunk in chunks]\n",
        "\n",
        "        # Calculate overall sentiment\n",
        "        avg_sentiment = np.mean([1 if result['label'] == 'POSITIVE' else (-1 if result['label'] == 'NEGATIVE' else 0)\n",
        "                               for result in sentiment_results])\n",
        "\n",
        "        # Analyze topics\n",
        "        topic_results = topic_classifier(\n",
        "            text[:1024],  # Using first 1024 chars due to model limitations\n",
        "            candidate_labels=political_topics,\n",
        "            multi_label=True\n",
        "        )\n",
        "\n",
        "        # Combine results\n",
        "        bias_results[speaker] = {\n",
        "            'sentiment_score': avg_sentiment,\n",
        "            'top_political_topics': dict(zip(\n",
        "                topic_results['labels'],\n",
        "                topic_results['scores']\n",
        "            )),\n",
        "            'overall_tendency': 'Conservative leaning' if avg_sentiment > 0.2 else\n",
        "                              'Liberal leaning' if avg_sentiment < -0.2 else\n",
        "                              'Relatively neutral'\n",
        "        }\n",
        "\n",
        "    return bias_results\n",
        "\n",
        "bias_results = analyze_political_bias(speaker_transcripts)\n",
        "\n",
        "# Print detailed results\n",
        "for speaker, results in bias_results.items():\n",
        "    print(f\"\\n{speaker}:\")\n",
        "    print(f\"Overall tendency: {results['overall_tendency']}\")\n",
        "    print(f\"Sentiment score: {results['sentiment_score']:.2f}\")\n",
        "    print(\"\\nTopic Analysis:\")\n",
        "    for topic, score in results['top_political_topics'].items():\n",
        "        print(f\"{topic}: {score:.2f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X9xGCdsAcWJP"
      },
      "source": [
        "### LLM Analysis   \n",
        "\n",
        "This cell analyzes an audio file by splitting it into segments, transcribing the content, identifying speakers, and performing text-based analysis for each segment.  \n",
        "\n",
        "1. **Model Initialization (`setup_models`)**:  \n",
        "   - Loads models for text generation (`LaMini-Flan-T5`), speech recognition (`Whisper`), and speaker identification (`HuBERT`).  \n",
        "\n",
        "2. **Audio Segmentation and Processing (`analyze_audio_segment`)**:  \n",
        "   - Divides the audio file into 30-second segments.  \n",
        "   - For each segment:  \n",
        "     - **Speech Recognition**: Transcribes the audio content.  \n",
        "     - **Speaker Identification**: Identifies the speaker and their confidence level.  \n",
        "     - **Text Analysis**: Uses an LLM to analyze political bias, main topics, and sentiment of the transcription.  \n",
        "\n",
        "3. **Result Display (`print_analysis`)**:  \n",
        "   - Prints the transcription, speaker information, political bias analysis, main topics, and sentiment for each audio segment in a formatted way.  \n",
        "\n",
        "4. **Main Execution (`analyze_audio_file`)**:  \n",
        "   - Handles the overall workflow of audio analysis, segment processing, and result presentation.  \n",
        "\n",
        "- **Output**: The cell processes the provided `audio_file` and generates detailed analyses of each segment's content.  \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nK1rjolFWJJF",
        "outputId": "6f97e1fd-8f6f-43ce-9808-8f4992e23f1d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Starting audio analysis...\n",
            "Loading models...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Device set to use cpu\n",
            "Device set to use cpu\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Models loaded successfully!\n",
            "Processing audio file: /content/drive/MyDrive/Audioanalysis/TrumpHarrisDebate.mp3\n",
            "\n",
            "Processing segment 1...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 1\n",
            "\n",
            "Processing segment 2...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 2\n",
            "\n",
            "Processing segment 3...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 3\n",
            "\n",
            "Processing segment 4...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 4\n",
            "\n",
            "Processing segment 5...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 5\n",
            "\n",
            "Processing segment 6...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 6\n",
            "\n",
            "Processing segment 7...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 7\n",
            "\n",
            "Processing segment 8...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 8\n",
            "\n",
            "Analysis complete. Printing results...\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 0 (0-30 seconds)\n",
            "\n",
            "Transcription:\n",
            " Thank you.\n",
            "\n",
            "Identified Speaker: id10304 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "I'm sorry, but you haven't provided any text for me to analyze for political bias or ideological leanings. Please provide the text so I can assist you better.\n",
            "\n",
            "Main Topics:\n",
            "I'm sorry, but you haven't provided any text for me to analyze. Please provide the text so I can assist you better.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of the text is positive.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 1 (30-60 seconds)\n",
            "\n",
            "Transcription:\n",
            " She's a Marxist. Everybody knows she's a Marxist. Her father's a Marxist professor in economics, and he taught her well. But her vice presidential pick says abortion in the ninth month is absolutely fine. He also says execution after birth, it's execution, no longer abortion because the baby is born, is okay. And that's not okay with me.\n",
            "\n",
            "Identified Speaker: id11246 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "Left-wing.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are Marxism, abortion, and execution after birth.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is negative.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 2 (60-90 seconds)\n",
            "\n",
            "Transcription:\n",
            " And Donald Trump certainly should not be telling a woman what to do with her body. Pregnant women who want to carry a pregnancy to term, suffering from a miscarriage, being denied care in an emergency room because the health care providers are afraid they might go to jail and she's bleeding out in a car in the parking lot. She didn't want that. Her husband didn't want that. In Springfield, they're eating the dogs, the people that came in, they're eating the cats, they're eating\n",
            "\n",
            "Identified Speaker: id11083 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "Left-wing.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are abortion, miscarriage, women's rights, and food choices in Springfield.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is negative.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 3 (90-120 seconds)\n",
            "\n",
            "Transcription:\n",
            " They're eating the pets of the people that live there. And this is what's happening in our country. Again, the Springfield City Manager says there's no evidence of that. Vice President Harris, I'll let you respond to the rest of what you've heard. You talk about extreme. Are you now acknowledging that you lost in 2020? No, I don't acknowledge that at all. I said that sarcastically, you know that. We said, oh, we lost by a whisker. That was said sarcastically. Mr. President, thank you. Vice President Harris, you heard the President there tonight. He said he didn't.\n",
            "\n",
            "Identified Speaker: id10421 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "Left-wing.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are the eating of pets, extreme behavior, and the loss of the President in 2020.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is negative.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 4 (120-150 seconds)\n",
            "\n",
            "Transcription:\n",
            " didn't say that he lost by Whiskers. So he still believes he did not lose the election. That was won by President Biden and yourself.\n",
            "\n",
            "Identified Speaker: id10837 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "Left-wing.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are the outcome of the election and the actions of President Biden and himself.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is positive.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 5 (150-180 seconds)\n",
            "\n",
            "Transcription:\n",
            " in the White House with no guardrails. Because certainly we know now the court won't stop him. We know J.D. Vance is not going to stop him. It's up to the American people. This is the one that weaponized, not me. She weaponized. I probably took a bullet to the head because of the things that they say about me. They talk about democracy. I'm a threat to democracy. They're the threat to democracy. So I think you've heard tonight two very different visions for our country.\n",
            "\n",
            "Identified Speaker: id11246 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "Left-wing.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are the White House, J.D. Vance, the American people, democracy, and two different visions for the country.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is negative.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 6 (180-210 seconds)\n",
            "\n",
            "Transcription:\n",
            " One that is focused on the future and the other that is focused on the past and an attempt to take us backward. But we're not going back. They've had three and a half years to create jobs and all the things we talked about. Why hasn't she done it? The worst president, the worst vice president in the history of our country.\n",
            "\n",
            "Identified Speaker: id11144 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "Left-wing.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are the focus on the future and the attempt to take us backward.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is negative.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 7 (210-240 seconds)\n",
            "\n",
            "Transcription:\n",
            " you\n",
            "\n",
            "Identified Speaker: id10859 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "I'm sorry, but there is no text provided for me to analyze for political bias or ideological leanings. Please provide the text so I can assist you better.\n",
            "\n",
            "Main Topics:\n",
            "I'm sorry, but you haven't provided any text for me to analyze. Please provide the text so I can assist you better.\n",
            "\n",
            "Sentiment Analysis:\n",
            "I'm sorry, but you haven't provided any text for me to analyze its sentiment. Please provide the text so I can assist you better.\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "from transformers import pipeline, AutoModelForSeq2SeqLM, AutoTokenizer\n",
        "from pydub import AudioSegment\n",
        "import tempfile\n",
        "import os\n",
        "\n",
        "def setup_models():\n",
        "    \"\"\"Initialize all required models.\"\"\"\n",
        "    print(\"Loading models...\")\n",
        "\n",
        "    # Text generation model\n",
        "    tokenizer = AutoTokenizer.from_pretrained(\"MBZUAI/LaMini-Flan-T5-248M\")\n",
        "    model = AutoModelForSeq2SeqLM.from_pretrained(\"MBZUAI/LaMini-Flan-T5-248M\")\n",
        "\n",
        "    # Speech recognition\n",
        "    asr = pipeline(\"automatic-speech-recognition\",\n",
        "                   model=\"openai/whisper-small\",\n",
        "                   device=0 if torch.cuda.is_available() else -1)\n",
        "\n",
        "    # Speaker identification\n",
        "    speaker_classifier = pipeline(\"audio-classification\",\n",
        "                                  model=\"superb/hubert-base-superb-sid\",\n",
        "                                  device=0 if torch.cuda.is_available() else -1)\n",
        "\n",
        "    print(\"Models loaded successfully!\")\n",
        "    return tokenizer, model, asr, speaker_classifier\n",
        "\n",
        "def generate_response(tokenizer, model, prompt, text):\n",
        "    \"\"\"Generate response from LLM.\"\"\"\n",
        "    input_text = f\"{prompt}\\n\\nText: {text}\"\n",
        "    inputs = tokenizer(input_text, return_tensors=\"pt\", max_length=512, truncation=True)\n",
        "\n",
        "    outputs = model.generate(\n",
        "        inputs.input_ids,\n",
        "        max_length=150,\n",
        "        num_beams=4,\n",
        "        temperature=0.7,\n",
        "        no_repeat_ngram_size=2\n",
        "    )\n",
        "\n",
        "    response = tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
        "    return response\n",
        "\n",
        "def analyze_audio_segment(audio_path, segment_duration=30000):  # 30 seconds\n",
        "    \"\"\"Analyze audio in segments.\"\"\"\n",
        "    tokenizer, model, asr, speaker_classifier = setup_models()\n",
        "\n",
        "    print(f\"Processing audio file: {audio_path}\")\n",
        "    audio = AudioSegment.from_file(audio_path)\n",
        "\n",
        "    with tempfile.TemporaryDirectory() as temp_dir:\n",
        "        results = []\n",
        "\n",
        "        for i, start in enumerate(range(0, len(audio), segment_duration)):\n",
        "            print(f\"\\nProcessing segment {i+1}...\")\n",
        "\n",
        "            segment = audio[start:start + segment_duration]\n",
        "            segment_path = os.path.join(temp_dir, f\"segment_{i}.wav\")\n",
        "            segment.export(segment_path, format=\"wav\")\n",
        "\n",
        "            print(\"Performing speech recognition...\")\n",
        "            transcription = asr(segment_path)\n",
        "            text = transcription[\"text\"]\n",
        "\n",
        "            print(\"Identifying speaker...\")\n",
        "            speaker_info = speaker_classifier(segment_path)\n",
        "\n",
        "            prompts = {\n",
        "                \"political_bias\": \"Analyze this text for any political bias or ideological leanings. Indicate whether it is left-wing, right-wing, or centrist.\",\n",
        "                \"main_topics\": \"What are the main topics or themes discussed in this text?\",\n",
        "                \"sentiment\": \"What is the sentiment of this text? Consider emotions, tone, and attitude.\"\n",
        "            }\n",
        "\n",
        "            analysis = {\n",
        "                \"segment\": i,\n",
        "                \"timestamp\": f\"{start//1000}-{(start+segment_duration)//1000} seconds\",\n",
        "                \"transcription\": text,\n",
        "                \"speaker_label\": speaker_info[0][\"label\"],\n",
        "                \"speaker_confidence\": speaker_info[0][\"score\"]\n",
        "            }\n",
        "\n",
        "            for prompt_name, prompt in prompts.items():\n",
        "                print(f\"Generating {prompt_name} analysis...\")\n",
        "                analysis[prompt_name] = generate_response(tokenizer, model, prompt, text)\n",
        "\n",
        "            results.append(analysis)\n",
        "            print(f\"Completed segment {i+1}\")\n",
        "\n",
        "    return results\n",
        "\n",
        "def print_analysis(results):\n",
        "    \"\"\"Print formatted analysis results.\"\"\"\n",
        "    for segment in results:\n",
        "        print(\"\\n\" + \"=\"*50)\n",
        "        print(f\"\\nSegment {segment['segment']} ({segment['timestamp']})\")\n",
        "        print(\"\\nTranscription:\")\n",
        "        print(segment['transcription'])\n",
        "        print(f\"\\nIdentified Speaker: {segment['speaker_label']} (Confidence: {segment['speaker_confidence']:.2f})\")\n",
        "        print(\"\\nPolitical Bias Analysis:\")\n",
        "        print(segment['political_bias'])\n",
        "        print(\"\\nMain Topics:\")\n",
        "        print(segment['main_topics'])\n",
        "        print(\"\\nSentiment Analysis:\")\n",
        "        print(segment['sentiment'])\n",
        "\n",
        "def analyze_audio_file(audio_path):\n",
        "    \"\"\"Main function to analyze audio file.\"\"\"\n",
        "    print(\"Starting audio analysis...\")\n",
        "    results = analyze_audio_segment(audio_path)\n",
        "    print(\"\\nAnalysis complete. Printing results...\")\n",
        "    print_analysis(results)\n",
        "    return results\n",
        "\n",
        "# Usage\n",
        "audio_path = audio_file\n",
        "results = analyze_audio_file(audio_path)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c24NlgnIuCFN"
      },
      "source": [
        "## Testing\n",
        "We are going to test the models on a new file. Using a part of audio from the following debate ,[\"Would America Be Better Under Communism? | Middle Ground\"](https://www.youtube.com/watch?v=hlgTd5o6Xmg&ab_channel=Jubilee). The audio have overlapping discussion, same sex voices and noise factor that will help us check models performances well."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zGpMcy9JWKMB"
      },
      "outputs": [],
      "source": [
        "test_audio = \"/content/drive/MyDrive/Audioanalysis/videoplayback (3)-[AudioTrimmer.com].mp3\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gOUf4bGpwzfo",
        "outputId": "2c233cad-d468-4b3c-cebb-08ab84f3641f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Found 3 speakers\n",
            "SPEAKER_02 {00:00:00 - 00:00:23}\n",
            "SPEAKER_00 {00:00:02 - 00:00:03}\n",
            "SPEAKER_00 {00:00:04 - 00:00:04}\n",
            "SPEAKER_00 {00:00:23 - 00:00:26}\n",
            "SPEAKER_00 {00:00:39 - 00:00:39}\n",
            "SPEAKER_00 {00:01:09 - 00:01:42}\n",
            "SPEAKER_01 {00:00:19 - 00:01:10}\n"
          ]
        }
      ],
      "source": [
        "speaker_segments = perform_diarization(test_audio)\n",
        "print(f\"Found {len(speaker_segments)} speakers\")\n",
        "print_speaker_times(speaker_segments)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8laZ9vTx1i6I",
        "outputId": "512e3918-2793-4560-eaaa-3f7481af1f06"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "SPEAKER_02: partner with Cuba. They started paying more for Cuba's, they started buying all of Cuba's sugars and paying more than the United States was paying. Fidel Castro's unrecorded thing that embargo had no effect on Cuba at all. So we can presume that up until 1991 when the USSR collapsed that it didn't have an effect. So to claim that the embargo is affecting Cuba and I think when we look at the, this is the, can I make a point?\n",
            "SPEAKER_00: We're at the key position.  your gigo produced by  This is a point of one to make year-old long times.  that we're done.  Despite undercutting the U.S. on labor because they don't actually have to pay people very much. They don't pay them based on their values so they can make people come over there and work far cheaper, have their companies there, and then we buy their products cheaper. We are propping up China's economy and we've been really stupid with our own policies when it comes to that. And also, we are constantly hamstringing ourselves because our government keeps raking in our economy more, getting more involved, tying its hands so that they are outpacing us, plus all the money we're spending on war instead of actually letting people keep their taxes and invest in more things. So they are playing us right now. The U.S. has been really foolish, but it's not because communism works. They were starving.\n",
            "SPEAKER_01: And I think when we look at the, this is the, can I make a point? Because this is a point of one to make you a long time. When we look at countries like Cuba and China, I think it's more important to judge them based on what they had before the revolution. Before Cuba had a revolution, nobody had access to healthcare. They were working on slave plantations that were dominated by Western multinational corporations. China before the revolution, yes, there were famines during the era of Mao. There were far more famines before Mao came to power and before China was able to industrialize and get to the point today, where they're now one of the most powerful countries on earth. In the 1950s, the US was already industrialized. China had to do that. They were a semi-futal country and extreme poverty. And in just 70 plus years, they've become this economic superpower. That is through central economic planning. And yes, allowing some of those private markets in. That's right, undercutting the...\n"
          ]
        }
      ],
      "source": [
        "speaker_transcripts = transcribe_segments(test_audio, speaker_segments)\n",
        "\n",
        "# Print transcripts\n",
        "for speaker, transcript in speaker_transcripts.items():\n",
        "    print(f\"{speaker}: {transcript}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dJyuApIC2AZS",
        "outputId": "6a567d33-1884-401b-9adb-4e1a2e3e1620"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "SPEAKER_02:\n",
            "Top 10 words: {'cuba': 5, 'paying': 3, 'started': 2, 'embargo': 2, 'effect': 2, 'partner': 1, 'buying': 1, 'sugars': 1, 'united': 1, 'states': 1}\n",
            "Sentiment polarity: 0.50\n",
            "Sentiment subjectivity: 0.50\n",
            "SPEAKER_00:\n",
            "Top 10 words: {'people': 3, 'keep': 2, 'make': 2, 'actually': 2, 'pay': 2, 'cheaper': 2, 'economy': 2, 'really': 2, 'us': 2, 'key': 1}\n",
            "Sentiment polarity: 0.21\n",
            "Sentiment subjectivity: 0.52\n",
            "SPEAKER_01:\n",
            "Top 10 words: {'china': 4, 'point': 3, 'revolution': 3, 'think': 2, 'look': 2, 'make': 2, 'one': 2, 'countries': 2, 'cuba': 2, 'yes': 2}\n",
            "Sentiment polarity: 0.22\n",
            "Sentiment subjectivity: 0.54\n"
          ]
        }
      ],
      "source": [
        "analysis_results = analyze_text(speaker_transcripts)\n",
        "\n",
        "# Print results\n",
        "for speaker, results in analysis_results.items():\n",
        "    print(f\"{speaker}:\")\n",
        "    print(f\"Top 10 words: {results['top_words']}\")\n",
        "    print(f\"Sentiment polarity: {results['sentiment_polarity']:.2f}\")\n",
        "    print(f\"Sentiment subjectivity: {results['sentiment_subjectivity']:.2f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 945,
          "referenced_widgets": [
            "f888319253994568af54e8dd756d8cfa",
            "9aedebf2dfd54851b6e408d1c296f727",
            "b78cca3f20424602bc05c7204b6d1542",
            "57a0d0676c274e2186c799561c4ce6bf",
            "cca9933394fe493fad92a2d99c507c5a",
            "5eb3ba497bcc462aaee20e3c798be867",
            "c903169d19c748928b20a7172ace10a0",
            "0539b29df9074969b6113cf54cadeb1e",
            "5c51883c961c467a8df5144dd295ed5a",
            "a2c5d7106b9e46aea6524d3ef8b2164e",
            "a26c7aa9ef0e46c1a2a1ba3d593faef1",
            "83b9f1f05442482ab8b2f0793b07efd4",
            "5cc6d05f60e140269ebb46a5bae145e5",
            "673515d59f444496ab1f3aff3e8ce058",
            "61b4bfe963ac4a61a58fed2797197507",
            "72b46b8deea64069bb5214ca380879ba",
            "dd402a97a42e41fa9c7c405779e73e92",
            "98468fcb2908488f88ea45b001ea9998",
            "39e352a672af4bdeba4e65cf578d1e8c",
            "1e4cd5e6db7e4df98a31f784c97b2ecc",
            "b102d16d28f74c678c207fea2a3a497d",
            "e3f34a0316a24bdf8e5204f750168a1d",
            "d97d4463169842e494003cfd33a21bc5",
            "ded3aa4752514b508834cdef6197f38a",
            "8382ca3122c243b29367bfd5a277ca49",
            "bfb2543b948f45878e0c79d842e0fc69",
            "32525c423dde4c5d9421af3437d964bc",
            "e1bbb4eb2a9445adb18c11c9af86b2e2",
            "6d2fb48c5b744a60bd80a080814d84ff",
            "edb98ce8cb924fd7976853fd91e284da",
            "0f12760c5c584006802e39e50425dbc8",
            "6dd25ab225974db4a5861e2b9e8fa2b2",
            "a46fa3ecb52d4f1eafbaf1dfcaf6414b",
            "f93642be56d548f39947a0b559499cb3",
            "061e4a83a027448893bc338a863aca3f",
            "b2cf9e6e250a471dac456ed8eede34d6",
            "a329c4ceb9004131b087c0aaf21b049f",
            "3eac38dc36b74e03a638464afc105f3c",
            "3f1d57334d254e53948488ca87658ee8",
            "101bf3b8cbf24a8f9d5de16153fa0816",
            "042d11ab0a43428bb1bcbd8710670cd3",
            "aff2f4acd6f54c28a8debfd84efb929e",
            "e9a50cb8f5824dc5958456b40a66d024",
            "a9f1ba65146c41758849a92faedeb06e",
            "80348bc9856143fcb7bd0d6745fe7917",
            "cdcf0da87e854411b9fd968998523789",
            "940b334c3f4649c0bd9a015e99e37cca",
            "1daf1bba090f4e469cae6afca85cf47c",
            "025c681ff7bd4c7abdc2f91eb193e599",
            "6b83f898a4ed426382436c4c116301de",
            "6b46639f44e347ea880251647710fb6d",
            "471cd5f30cc949c89b1b481d93edbf61",
            "43d5030aafa9460d82fe08ef8cd25d3d",
            "e9fadaf433af445bb5629c8c3ea4eaad",
            "5acd0a7f6264448797f9d6488e72b4d7",
            "c2e60937ff1846448a55503b633154a0",
            "6ea0aa8ef80f4abf9556721fa8c28b56",
            "9313a8f5875a4e92867f3afb4f9c3370",
            "b0baba54ad45489ba652399e3c61a620",
            "e6da6b006a504c8e8614163ae94383b9",
            "df63123b4188452ba8cb59c2ba02687e",
            "161bbb3fc91f4d4daec5852cd8fd829f",
            "a3211ab6f08e4b988f465a35de9ee3e9",
            "e8ea338cdde6427cbd6d855e5ab2961f",
            "f1cb740535f040f18da71e5a973518cd",
            "ba431278a004449ebc33d59cd09c7b63",
            "9fdba433a8cc4a509cb4f1d074c91127",
            "8265eca0ad6f4a988e10d761db8239ba",
            "f1670eb3b788495c98f331ae5301b566",
            "de3f00a6657b44c786d49a9f7dd7063d",
            "777936e9d4424871864e9a6a39b167a5",
            "61f97631d45a459da02d684a299d58ff",
            "2a1b984500444301af2f183da81e89a4",
            "90c4814b4e73415e8890c37976552837",
            "5ffc71806959493bb56a6be32577b2ab",
            "29b78242947d4388972dc599434133d3",
            "cc21b59e87d343bdb8cc6d8677437bc0",
            "5f5035b5cb824ef98c86fcd001967c65",
            "5715d7f18575443187f699fd5320d70c",
            "4dd566441edd455b89f8fdfbb0b624a9",
            "e01732ba8b7a4370a006df80a97f9d06",
            "91f6cc9810194879b9c9e326e63f95e7",
            "2cb4a416c57d4308af246ae64b5a976d",
            "80a693f8293542ee90a11f526c2c229a",
            "849b32554e46462982ae031f1fb6ccb7",
            "d014e68a05f84c91bb955c70c954e238",
            "72ec7bf66c7f458485b5f0f46ac2687c",
            "6fe80c1c027a492398eb8fe5a6388ca3",
            "c3528b508a8c4283a9e75ec35ba07633",
            "37d32ba33c5e4f1e80bbce07536448ac",
            "74655b9e6bd04193a05ff7740c1906d2",
            "b03a724c213f48e0b18edee4b9132909",
            "ed8296b8e9f347f085ca843bede8a2c2",
            "b218d37cea60418cbbe911b86dfcd0b6",
            "b56d1903a832436ea2cad072b789fd0e",
            "7d4b9cb088b34b708ecf1ef035592fd3",
            "65712912b8d347cfb12f3b4b0848fb13",
            "66672f6b6e644df9aac8d37568850de2",
            "70064df9e5604c9ebc6ebde0059ea002",
            "14f9227f49ec4fbea9eaa8ad4bbf7ffa",
            "2eed3714100c4343a0c5152612e8fb32",
            "324491f82b194ce3a65f653694d74001",
            "90dd5f961655477f8f51cb88d9de1973",
            "619cebd9bd03488599513b5dddb587fc",
            "8ab00b34da1340d7b6df80d988a898b3",
            "1388e2461e7741a6834c3e4a3905de0c",
            "515a69a5d17142b18c630a10e96d360d",
            "08f98bcf57b4456791926b881ede1b01",
            "d48e3f56d96643af854136dd92ee44e5",
            "37c7acb511d6496d962602dfa8b0a971"
          ]
        },
        "id": "t0atZ-JN2She",
        "outputId": "1963f528-f4a6-43e7-fa31-ba3fa636d765"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "f888319253994568af54e8dd756d8cfa",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "pytorch_model.bin:   0%|          | 0.00/499M [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "83b9f1f05442482ab8b2f0793b07efd4",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "vocab.json:   0%|          | 0.00/899k [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "d97d4463169842e494003cfd33a21bc5",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "f93642be56d548f39947a0b559499cb3",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/150 [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Device set to use cpu\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "80348bc9856143fcb7bd0d6745fe7917",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "config.json:   0%|          | 0.00/1.15k [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c2e60937ff1846448a55503b633154a0",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/1.63G [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "9fdba433a8cc4a509cb4f1d074c91127",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/26.0 [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "5f5035b5cb824ef98c86fcd001967c65",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "vocab.json:   0%|          | 0.00/899k [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c3528b508a8c4283a9e75ec35ba07633",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "14f9227f49ec4fbea9eaa8ad4bbf7ffa",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/1.36M [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Device set to use cpu\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "SPEAKER_02:\n",
            "Overall tendency: Relatively neutral\n",
            "Sentiment score: 0.00\n",
            "\n",
            "Topic Analysis:\n",
            "economic policy: 0.96\n",
            "social policy: 0.83\n",
            "conservative views: 0.78\n",
            "liberal views: 0.74\n",
            "neutral politics: 0.03\n",
            "\n",
            "SPEAKER_00:\n",
            "Overall tendency: Relatively neutral\n",
            "Sentiment score: 0.00\n",
            "\n",
            "Topic Analysis:\n",
            "economic policy: 0.98\n",
            "conservative views: 0.48\n",
            "social policy: 0.46\n",
            "liberal views: 0.35\n",
            "neutral politics: 0.05\n",
            "\n",
            "SPEAKER_01:\n",
            "Overall tendency: Relatively neutral\n",
            "Sentiment score: 0.00\n",
            "\n",
            "Topic Analysis:\n",
            "economic policy: 0.98\n",
            "conservative views: 0.65\n",
            "social policy: 0.62\n",
            "liberal views: 0.42\n",
            "neutral politics: 0.01\n"
          ]
        }
      ],
      "source": [
        "bias_results = analyze_political_bias(speaker_transcripts)\n",
        "\n",
        "# Print detailed results\n",
        "for speaker, results in bias_results.items():\n",
        "    print(f\"\\n{speaker}:\")\n",
        "    print(f\"Overall tendency: {results['overall_tendency']}\")\n",
        "    print(f\"Sentiment score: {results['sentiment_score']:.2f}\")\n",
        "    print(\"\\nTopic Analysis:\")\n",
        "    for topic, score in results['top_political_topics'].items():\n",
        "        print(f\"{topic}: {score:.2f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BsYe0ZifBnGS",
        "outputId": "531843f1-75c8-4988-c169-a20e1bf5a4d0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Starting audio analysis...\n",
            "Loading models...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Device set to use cpu\n",
            "Device set to use cpu\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Models loaded successfully!\n",
            "Processing audio file: /content/drive/MyDrive/Audioanalysis/videoplayback (3)-[AudioTrimmer.com].mp3\n",
            "\n",
            "Processing segment 1...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 1\n",
            "\n",
            "Processing segment 2...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 2\n",
            "\n",
            "Processing segment 3...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 3\n",
            "\n",
            "Processing segment 4...\n",
            "Performing speech recognition...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying speaker...\n",
            "Generating political_bias analysis...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Generating main_topics analysis...\n",
            "Generating sentiment analysis...\n",
            "Completed segment 4\n",
            "\n",
            "Analysis complete. Printing results...\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 0 (0-30 seconds)\n",
            "\n",
            "Transcription:\n",
            " partner with Cuba. They started paying more for Cuba's. They started buying all of Cuba's sugars and paying more than the United States was paying. Fidel Castro is on record saying that the embargo had no effect on Cuba at all. So we can presume that up until 1991 when the USSR collapsed that it didn't have an effect. So to claim that the embargo is affecting Cuba. And I think when we look at the... Can I make a point? Because this is a point I wanted to make for a long time. When we look at countries like Cuba and China, I think it's\n",
            "\n",
            "Identified Speaker: id11056 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "Left-wing.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are the impact of the embargo on Cuba and the United States.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is negative.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 1 (30-60 seconds)\n",
            "\n",
            "Transcription:\n",
            " more important to judge them based on what they had before the revolution. Before Cuba had a revolution, nobody had access to health care. They were working on slave plantations that were dominated by Western multinational corporations. China before the revolution, yes, there were famines during the era of Mao. There were far more famines before Mao came to power and before China was able to industrialize and get to the point today where they're now one of the most powerful countries on earth. In the 1950s, the US was already industrialized. China had to do that. They were a semi-feudal country in\n",
            "\n",
            "Identified Speaker: id11058 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "The text does not contain any political bias or ideological leanings.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are: - Cuba's access to health care and slavery, as well as the famines and industrialization of China before the revolution.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is negative.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 2 (60-90 seconds)\n",
            "\n",
            "Transcription:\n",
            " and in just 70 plus years they've become this economic superpower. That is through central economic planning and yes, allowing some of those private markets in.\n",
            "\n",
            "Identified Speaker: id10266 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "The text appears to be centrist.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are economic superpower, central economic planning, and private markets.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is positive.\n",
            "\n",
            "==================================================\n",
            "\n",
            "Segment 3 (90-120 seconds)\n",
            "\n",
            "Transcription:\n",
            " behind its hands so that they are outpacing us. Plus all the money we're spending on war instead of actually letting people keep their taxes and invest in more things. So they are playing us right now. The US has been really foolish, but it's not because communism works. They were starving.\n",
            "\n",
            "Identified Speaker: id11078 (Confidence: 1.00)\n",
            "\n",
            "Political Bias Analysis:\n",
            "Left-wing.\n",
            "\n",
            "Main Topics:\n",
            "The main topics or themes discussed in this text are economic inequality, government spending on war, and the role of the US in the war effort.\n",
            "\n",
            "Sentiment Analysis:\n",
            "The sentiment of this text is negative.\n"
          ]
        }
      ],
      "source": [
        "audio_path = test_audio\n",
        "results = analyze_audio_file(audio_path)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "95I3gx2jcixr"
      },
      "source": [
        "### Conclusion  \n",
        "\n",
        "The pretrained models used for segmentation, diarization, transcription, and sentiment analysis in this analysis demonstrated varying levels of accuracy and performance.\n",
        "\n",
        "- **Pretrained Models**:  \n",
        "  - The **Whisper** model for transcription and the **HuBERT** model for speaker diarization performed highly accurately in segmenting and transcribing the audio. These models successfully transcribed the speech with minimal errors and identified speakers with a high level of confidence.\n",
        "  - **Sentiment Analysis**: The models used for sentiment analysis, such as the **LaMini-Flan-T5** model, provided reliable insights into the emotions, tone, and attitude conveyed in the transcriptions.\n",
        "\n",
        "- **Limitations of LLMs**:  \n",
        "  - The LLM (**LaMini-Flan-T5**) performed well in analyzing sentiment, political bias, and main topics, but it similarly failed to identify speakers' names, limiting its effectiveness in speaker-specific analysis.\n",
        "\n",
        "Overall, while the pretrained models for transcription and diarization demonstrated strong performance, the LLMs showed limitations in both transcription and speaker identification, highlighting the need for further improvements in these areas.\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "025c681ff7bd4c7abdc2f91eb193e599": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "042d11ab0a43428bb1bcbd8710670cd3": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0539b29df9074969b6113cf54cadeb1e": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "061e4a83a027448893bc338a863aca3f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3f1d57334d254e53948488ca87658ee8",
            "placeholder": "​",
            "style": "IPY_MODEL_101bf3b8cbf24a8f9d5de16153fa0816",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "08f98bcf57b4456791926b881ede1b01": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0f12760c5c584006802e39e50425dbc8": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "101bf3b8cbf24a8f9d5de16153fa0816": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1388e2461e7741a6834c3e4a3905de0c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "14f9227f49ec4fbea9eaa8ad4bbf7ffa": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2eed3714100c4343a0c5152612e8fb32",
              "IPY_MODEL_324491f82b194ce3a65f653694d74001",
              "IPY_MODEL_90dd5f961655477f8f51cb88d9de1973"
            ],
            "layout": "IPY_MODEL_619cebd9bd03488599513b5dddb587fc"
          }
        },
        "161bbb3fc91f4d4daec5852cd8fd829f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1daf1bba090f4e469cae6afca85cf47c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e9fadaf433af445bb5629c8c3ea4eaad",
            "placeholder": "​",
            "style": "IPY_MODEL_5acd0a7f6264448797f9d6488e72b4d7",
            "value": " 1.15k/1.15k [00:00&lt;00:00, 58.9kB/s]"
          }
        },
        "1e4cd5e6db7e4df98a31f784c97b2ecc": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "29b78242947d4388972dc599434133d3": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2a1b984500444301af2f183da81e89a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2cb4a416c57d4308af246ae64b5a976d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2eed3714100c4343a0c5152612e8fb32": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8ab00b34da1340d7b6df80d988a898b3",
            "placeholder": "​",
            "style": "IPY_MODEL_1388e2461e7741a6834c3e4a3905de0c",
            "value": "tokenizer.json: 100%"
          }
        },
        "324491f82b194ce3a65f653694d74001": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_515a69a5d17142b18c630a10e96d360d",
            "max": 1355863,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_08f98bcf57b4456791926b881ede1b01",
            "value": 1355863
          }
        },
        "32525c423dde4c5d9421af3437d964bc": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "37c7acb511d6496d962602dfa8b0a971": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "37d32ba33c5e4f1e80bbce07536448ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b218d37cea60418cbbe911b86dfcd0b6",
            "placeholder": "​",
            "style": "IPY_MODEL_b56d1903a832436ea2cad072b789fd0e",
            "value": "merges.txt: 100%"
          }
        },
        "39e352a672af4bdeba4e65cf578d1e8c": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3eac38dc36b74e03a638464afc105f3c": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3f1d57334d254e53948488ca87658ee8": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "43d5030aafa9460d82fe08ef8cd25d3d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "471cd5f30cc949c89b1b481d93edbf61": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4dd566441edd455b89f8fdfbb0b624a9": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_849b32554e46462982ae031f1fb6ccb7",
            "max": 898822,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d014e68a05f84c91bb955c70c954e238",
            "value": 898822
          }
        },
        "515a69a5d17142b18c630a10e96d360d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5715d7f18575443187f699fd5320d70c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2cb4a416c57d4308af246ae64b5a976d",
            "placeholder": "​",
            "style": "IPY_MODEL_80a693f8293542ee90a11f526c2c229a",
            "value": "vocab.json: 100%"
          }
        },
        "57a0d0676c274e2186c799561c4ce6bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a2c5d7106b9e46aea6524d3ef8b2164e",
            "placeholder": "​",
            "style": "IPY_MODEL_a26c7aa9ef0e46c1a2a1ba3d593faef1",
            "value": " 499M/499M [00:08&lt;00:00, 126MB/s]"
          }
        },
        "5acd0a7f6264448797f9d6488e72b4d7": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5c51883c961c467a8df5144dd295ed5a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5cc6d05f60e140269ebb46a5bae145e5": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dd402a97a42e41fa9c7c405779e73e92",
            "placeholder": "​",
            "style": "IPY_MODEL_98468fcb2908488f88ea45b001ea9998",
            "value": "vocab.json: 100%"
          }
        },
        "5eb3ba497bcc462aaee20e3c798be867": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5f5035b5cb824ef98c86fcd001967c65": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_5715d7f18575443187f699fd5320d70c",
              "IPY_MODEL_4dd566441edd455b89f8fdfbb0b624a9",
              "IPY_MODEL_e01732ba8b7a4370a006df80a97f9d06"
            ],
            "layout": "IPY_MODEL_91f6cc9810194879b9c9e326e63f95e7"
          }
        },
        "5ffc71806959493bb56a6be32577b2ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "619cebd9bd03488599513b5dddb587fc": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "61b4bfe963ac4a61a58fed2797197507": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b102d16d28f74c678c207fea2a3a497d",
            "placeholder": "​",
            "style": "IPY_MODEL_e3f34a0316a24bdf8e5204f750168a1d",
            "value": " 899k/899k [00:00&lt;00:00, 25.7MB/s]"
          }
        },
        "61f97631d45a459da02d684a299d58ff": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "65712912b8d347cfb12f3b4b0848fb13": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "66672f6b6e644df9aac8d37568850de2": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "673515d59f444496ab1f3aff3e8ce058": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_39e352a672af4bdeba4e65cf578d1e8c",
            "max": 898822,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_1e4cd5e6db7e4df98a31f784c97b2ecc",
            "value": 898822
          }
        },
        "6b46639f44e347ea880251647710fb6d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6b83f898a4ed426382436c4c116301de": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6d2fb48c5b744a60bd80a080814d84ff": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6dd25ab225974db4a5861e2b9e8fa2b2": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6ea0aa8ef80f4abf9556721fa8c28b56": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_df63123b4188452ba8cb59c2ba02687e",
            "placeholder": "​",
            "style": "IPY_MODEL_161bbb3fc91f4d4daec5852cd8fd829f",
            "value": "model.safetensors: 100%"
          }
        },
        "6fe80c1c027a492398eb8fe5a6388ca3": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "70064df9e5604c9ebc6ebde0059ea002": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "72b46b8deea64069bb5214ca380879ba": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "72ec7bf66c7f458485b5f0f46ac2687c": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "74655b9e6bd04193a05ff7740c1906d2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7d4b9cb088b34b708ecf1ef035592fd3",
            "max": 456318,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_65712912b8d347cfb12f3b4b0848fb13",
            "value": 456318
          }
        },
        "777936e9d4424871864e9a6a39b167a5": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7d4b9cb088b34b708ecf1ef035592fd3": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "80348bc9856143fcb7bd0d6745fe7917": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_cdcf0da87e854411b9fd968998523789",
              "IPY_MODEL_940b334c3f4649c0bd9a015e99e37cca",
              "IPY_MODEL_1daf1bba090f4e469cae6afca85cf47c"
            ],
            "layout": "IPY_MODEL_025c681ff7bd4c7abdc2f91eb193e599"
          }
        },
        "80a693f8293542ee90a11f526c2c229a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8265eca0ad6f4a988e10d761db8239ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_61f97631d45a459da02d684a299d58ff",
            "placeholder": "​",
            "style": "IPY_MODEL_2a1b984500444301af2f183da81e89a4",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "8382ca3122c243b29367bfd5a277ca49": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_edb98ce8cb924fd7976853fd91e284da",
            "max": 456318,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_0f12760c5c584006802e39e50425dbc8",
            "value": 456318
          }
        },
        "83b9f1f05442482ab8b2f0793b07efd4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_5cc6d05f60e140269ebb46a5bae145e5",
              "IPY_MODEL_673515d59f444496ab1f3aff3e8ce058",
              "IPY_MODEL_61b4bfe963ac4a61a58fed2797197507"
            ],
            "layout": "IPY_MODEL_72b46b8deea64069bb5214ca380879ba"
          }
        },
        "849b32554e46462982ae031f1fb6ccb7": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8ab00b34da1340d7b6df80d988a898b3": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "90c4814b4e73415e8890c37976552837": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "90dd5f961655477f8f51cb88d9de1973": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d48e3f56d96643af854136dd92ee44e5",
            "placeholder": "​",
            "style": "IPY_MODEL_37c7acb511d6496d962602dfa8b0a971",
            "value": " 1.36M/1.36M [00:00&lt;00:00, 38.7MB/s]"
          }
        },
        "91f6cc9810194879b9c9e326e63f95e7": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9313a8f5875a4e92867f3afb4f9c3370": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a3211ab6f08e4b988f465a35de9ee3e9",
            "max": 1629437147,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e8ea338cdde6427cbd6d855e5ab2961f",
            "value": 1629437147
          }
        },
        "940b334c3f4649c0bd9a015e99e37cca": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_471cd5f30cc949c89b1b481d93edbf61",
            "max": 1154,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_43d5030aafa9460d82fe08ef8cd25d3d",
            "value": 1154
          }
        },
        "98468fcb2908488f88ea45b001ea9998": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9aedebf2dfd54851b6e408d1c296f727": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5eb3ba497bcc462aaee20e3c798be867",
            "placeholder": "​",
            "style": "IPY_MODEL_c903169d19c748928b20a7172ace10a0",
            "value": "pytorch_model.bin: 100%"
          }
        },
        "9fdba433a8cc4a509cb4f1d074c91127": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8265eca0ad6f4a988e10d761db8239ba",
              "IPY_MODEL_f1670eb3b788495c98f331ae5301b566",
              "IPY_MODEL_de3f00a6657b44c786d49a9f7dd7063d"
            ],
            "layout": "IPY_MODEL_777936e9d4424871864e9a6a39b167a5"
          }
        },
        "a26c7aa9ef0e46c1a2a1ba3d593faef1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a2c5d7106b9e46aea6524d3ef8b2164e": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a3211ab6f08e4b988f465a35de9ee3e9": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a329c4ceb9004131b087c0aaf21b049f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e9a50cb8f5824dc5958456b40a66d024",
            "placeholder": "​",
            "style": "IPY_MODEL_a9f1ba65146c41758849a92faedeb06e",
            "value": " 150/150 [00:00&lt;00:00, 4.84kB/s]"
          }
        },
        "a46fa3ecb52d4f1eafbaf1dfcaf6414b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a9f1ba65146c41758849a92faedeb06e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "aff2f4acd6f54c28a8debfd84efb929e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "b03a724c213f48e0b18edee4b9132909": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_66672f6b6e644df9aac8d37568850de2",
            "placeholder": "​",
            "style": "IPY_MODEL_70064df9e5604c9ebc6ebde0059ea002",
            "value": " 456k/456k [00:00&lt;00:00, 25.1MB/s]"
          }
        },
        "b0baba54ad45489ba652399e3c61a620": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f1cb740535f040f18da71e5a973518cd",
            "placeholder": "​",
            "style": "IPY_MODEL_ba431278a004449ebc33d59cd09c7b63",
            "value": " 1.63G/1.63G [00:18&lt;00:00, 195MB/s]"
          }
        },
        "b102d16d28f74c678c207fea2a3a497d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b218d37cea60418cbbe911b86dfcd0b6": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b2cf9e6e250a471dac456ed8eede34d6": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_042d11ab0a43428bb1bcbd8710670cd3",
            "max": 150,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_aff2f4acd6f54c28a8debfd84efb929e",
            "value": 150
          }
        },
        "b56d1903a832436ea2cad072b789fd0e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b78cca3f20424602bc05c7204b6d1542": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0539b29df9074969b6113cf54cadeb1e",
            "max": 498679497,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_5c51883c961c467a8df5144dd295ed5a",
            "value": 498679497
          }
        },
        "ba431278a004449ebc33d59cd09c7b63": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bfb2543b948f45878e0c79d842e0fc69": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6dd25ab225974db4a5861e2b9e8fa2b2",
            "placeholder": "​",
            "style": "IPY_MODEL_a46fa3ecb52d4f1eafbaf1dfcaf6414b",
            "value": " 456k/456k [00:00&lt;00:00, 19.7MB/s]"
          }
        },
        "c2e60937ff1846448a55503b633154a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6ea0aa8ef80f4abf9556721fa8c28b56",
              "IPY_MODEL_9313a8f5875a4e92867f3afb4f9c3370",
              "IPY_MODEL_b0baba54ad45489ba652399e3c61a620"
            ],
            "layout": "IPY_MODEL_e6da6b006a504c8e8614163ae94383b9"
          }
        },
        "c3528b508a8c4283a9e75ec35ba07633": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_37d32ba33c5e4f1e80bbce07536448ac",
              "IPY_MODEL_74655b9e6bd04193a05ff7740c1906d2",
              "IPY_MODEL_b03a724c213f48e0b18edee4b9132909"
            ],
            "layout": "IPY_MODEL_ed8296b8e9f347f085ca843bede8a2c2"
          }
        },
        "c903169d19c748928b20a7172ace10a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cc21b59e87d343bdb8cc6d8677437bc0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cca9933394fe493fad92a2d99c507c5a": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cdcf0da87e854411b9fd968998523789": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6b83f898a4ed426382436c4c116301de",
            "placeholder": "​",
            "style": "IPY_MODEL_6b46639f44e347ea880251647710fb6d",
            "value": "config.json: 100%"
          }
        },
        "d014e68a05f84c91bb955c70c954e238": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d48e3f56d96643af854136dd92ee44e5": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d97d4463169842e494003cfd33a21bc5": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ded3aa4752514b508834cdef6197f38a",
              "IPY_MODEL_8382ca3122c243b29367bfd5a277ca49",
              "IPY_MODEL_bfb2543b948f45878e0c79d842e0fc69"
            ],
            "layout": "IPY_MODEL_32525c423dde4c5d9421af3437d964bc"
          }
        },
        "dd402a97a42e41fa9c7c405779e73e92": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "de3f00a6657b44c786d49a9f7dd7063d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_29b78242947d4388972dc599434133d3",
            "placeholder": "​",
            "style": "IPY_MODEL_cc21b59e87d343bdb8cc6d8677437bc0",
            "value": " 26.0/26.0 [00:00&lt;00:00, 1.33kB/s]"
          }
        },
        "ded3aa4752514b508834cdef6197f38a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e1bbb4eb2a9445adb18c11c9af86b2e2",
            "placeholder": "​",
            "style": "IPY_MODEL_6d2fb48c5b744a60bd80a080814d84ff",
            "value": "merges.txt: 100%"
          }
        },
        "df63123b4188452ba8cb59c2ba02687e": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e01732ba8b7a4370a006df80a97f9d06": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_72ec7bf66c7f458485b5f0f46ac2687c",
            "placeholder": "​",
            "style": "IPY_MODEL_6fe80c1c027a492398eb8fe5a6388ca3",
            "value": " 899k/899k [00:00&lt;00:00, 36.2MB/s]"
          }
        },
        "e1bbb4eb2a9445adb18c11c9af86b2e2": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e3f34a0316a24bdf8e5204f750168a1d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e6da6b006a504c8e8614163ae94383b9": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e8ea338cdde6427cbd6d855e5ab2961f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e9a50cb8f5824dc5958456b40a66d024": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e9fadaf433af445bb5629c8c3ea4eaad": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ed8296b8e9f347f085ca843bede8a2c2": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "edb98ce8cb924fd7976853fd91e284da": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f1670eb3b788495c98f331ae5301b566": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_90c4814b4e73415e8890c37976552837",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_5ffc71806959493bb56a6be32577b2ab",
            "value": 26
          }
        },
        "f1cb740535f040f18da71e5a973518cd": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f888319253994568af54e8dd756d8cfa": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9aedebf2dfd54851b6e408d1c296f727",
              "IPY_MODEL_b78cca3f20424602bc05c7204b6d1542",
              "IPY_MODEL_57a0d0676c274e2186c799561c4ce6bf"
            ],
            "layout": "IPY_MODEL_cca9933394fe493fad92a2d99c507c5a"
          }
        },
        "f93642be56d548f39947a0b559499cb3": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_061e4a83a027448893bc338a863aca3f",
              "IPY_MODEL_b2cf9e6e250a471dac456ed8eede34d6",
              "IPY_MODEL_a329c4ceb9004131b087c0aaf21b049f"
            ],
            "layout": "IPY_MODEL_3eac38dc36b74e03a638464afc105f3c"
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
